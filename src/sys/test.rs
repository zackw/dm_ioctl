// SPDX-License-Identifier: LGPL-2.0+ WITH Linux-syscall-note
//
// N.B. This file consists almost entirely of generated code; it may
// not actually be copyrightable.  However, it is definitely a derived
// work of the Linux kernel and of rust-bindgen; we have therefore
// applied the kernel's license as it is the more restrictive of the two.

//! Tests, generated by rust-bindgen 0.69.5, for the raw ioctl
//! interface defined in the parent module.

use super::*;

use ::core::mem::{align_of, size_of, MaybeUninit};
use ::core::ptr::addr_of;

#[test]
fn bindgen_test_layout_dm_ioctl() {
    const UNINIT: MaybeUninit<dm_ioctl> = MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        size_of::<dm_ioctl>(),
        312usize,
        concat!("Size of: ", stringify!(dm_ioctl))
    );
    assert_eq!(
        align_of::<dm_ioctl>(),
        8usize,
        concat!("Alignment of ", stringify!(dm_ioctl))
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_ioctl),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).data_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_ioctl),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).data_start) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_ioctl),
            "::",
            stringify!(data_start)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).target_count) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_ioctl),
            "::",
            stringify!(target_count)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).open_count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_ioctl),
            "::",
            stringify!(open_count)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_ioctl),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).event_nr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_ioctl),
            "::",
            stringify!(event_nr)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).padding) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_ioctl),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).dev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_ioctl),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_ioctl),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).uuid) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_ioctl),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).data) as usize - ptr as usize },
        305usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_ioctl),
            "::",
            stringify!(data)
        )
    );
}

#[test]
fn bindgen_test_layout_dm_target_spec() {
    const UNINIT: MaybeUninit<dm_target_spec> = MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        size_of::<dm_target_spec>(),
        40usize,
        concat!("Size of: ", stringify!(dm_target_spec))
    );
    assert_eq!(
        align_of::<dm_target_spec>(),
        8usize,
        concat!("Alignment of ", stringify!(dm_target_spec))
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).sector_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_target_spec),
            "::",
            stringify!(sector_start)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_target_spec),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).status) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_target_spec),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).next) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_target_spec),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).target_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_target_spec),
            "::",
            stringify!(target_type)
        )
    );
}

#[test]
fn bindgen_test_layout_dm_target_deps() {
    const UNINIT: MaybeUninit<dm_target_deps> = MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        size_of::<dm_target_deps>(),
        8usize,
        concat!("Size of: ", stringify!(dm_target_deps))
    );
    assert_eq!(
        align_of::<dm_target_deps>(),
        8usize,
        concat!("Alignment of ", stringify!(dm_target_deps))
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_target_deps),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).padding) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_target_deps),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).dev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_target_deps),
            "::",
            stringify!(dev)
        )
    );
}

#[test]
fn bindgen_test_layout_dm_name_list() {
    const UNINIT: MaybeUninit<dm_name_list> = MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        size_of::<dm_name_list>(),
        16usize,
        concat!("Size of: ", stringify!(dm_name_list))
    );
    assert_eq!(
        align_of::<dm_name_list>(),
        8usize,
        concat!("Alignment of ", stringify!(dm_name_list))
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_name_list),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_name_list),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).name) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_name_list),
            "::",
            stringify!(name)
        )
    );
}

#[test]
fn bindgen_test_layout_dm_target_versions() {
    const UNINIT: MaybeUninit<dm_target_versions> = MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        size_of::<dm_target_versions>(),
        16usize,
        concat!("Size of: ", stringify!(dm_target_versions))
    );
    assert_eq!(
        align_of::<dm_target_versions>(),
        4usize,
        concat!("Alignment of ", stringify!(dm_target_versions))
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_target_versions),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_target_versions),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_target_versions),
            "::",
            stringify!(name)
        )
    );
}

#[test]
fn bindgen_test_layout_dm_target_msg() {
    const UNINIT: MaybeUninit<dm_target_msg> = MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        size_of::<dm_target_msg>(),
        8usize,
        concat!("Size of: ", stringify!(dm_target_msg))
    );
    assert_eq!(
        align_of::<dm_target_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(dm_target_msg))
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).sector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_target_msg),
            "::",
            stringify!(sector)
        )
    );
    assert_eq!(
        unsafe { addr_of!((*ptr).message) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dm_target_msg),
            "::",
            stringify!(message)
        )
    );
}
