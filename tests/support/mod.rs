// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

//! Utility functions used solely by unit tests.

use dm_ioctl::{Device, DmNameBuf, DmResult, DmUuidBuf, DM};

/// String that is to be concatenated with test supplied name to identify
/// devices and filesystems generated by tests.
static DM_TEST_ID: &str = "_dm-rs_test_delme";

/// Generate a string with an identifying test suffix
pub fn test_string(name: &str) -> String {
    let mut namestr = String::from(name);
    namestr.push_str(DM_TEST_ID);
    namestr
}

/// Generate the test name given the test supplied name.
pub fn test_name(name: &str) -> DmResult<DmNameBuf> {
    DmNameBuf::new(test_string(name))
}

/// Generate the test uuid given the test supplied name.
pub fn test_uuid(name: &str) -> DmResult<DmUuidBuf> {
    DmUuidBuf::new(test_string(name))
}

/// Returns a subset of the devices returned by list_devices(), namely
/// the devices whose names end with DM_TEST_ID, our test device suffix.
/// This function is useful for listing devices in tests that should not
/// take non-test devices into account.
pub fn list_test_devices(
    dm: &DM,
) -> DmResult<Vec<(DmNameBuf, Device, Option<u32>)>> {
    let mut test_devs = dm.list_devices()?;
    test_devs.retain(|x| x.0.as_bytes().ends_with(DM_TEST_ID.as_bytes()));
    Ok(test_devs)
}
